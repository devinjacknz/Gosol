
version: '3.8'

volumes:
  postgres_data:
  redis_data:

services:
  postgres:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: gosol_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/gosol_test?sslmode=disable
      - REDIS_URL=redis://redis:6379/0
      - ML_SERVICE_URL=http://ml-service:8000
      - GIN_MODE=debug
      - DYDX_API_ENDPOINT=https://api.stage.dydx.exchange
      - HYPERLIQUID_API_ENDPOINT=https://api.hyperliquid-testnet.xyz
      - LOG_LEVEL=debug
      - USE_TEST_NETWORK=true
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    environment:
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY:-test_key_123}
      - LOG_LEVEL=debug
      - USE_TEST_NETWORK=true
      - DYDX_TEST_MODE=true
      - HYPERLIQUID_TEST_MODE=true
      - DYDX_API_ENDPOINT=https://api.stage.dydx.exchange
      - HYPERLIQUID_API_ENDPOINT=https://api.hyperliquid-testnet.xyz
    ports:
      - "8000:8000"
    depends_on:
      - backend
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=test
    environment:
      - NEXT_PUBLIC_BACKEND_URL=http://backend:8080
      - NEXT_PUBLIC_WS_URL=ws://backend:8080/ws
      - NEXT_PUBLIC_API_URL=http://backend:8080
      - NEXT_PUBLIC_ENV=test
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
      ml-service:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 3
